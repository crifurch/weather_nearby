import 'dart:convert';
import 'dart:io';

import 'package:sprintf/sprintf.dart';
import 'package:unlimited_things_dart/unlimited_things_dart.dart';

class LocaleKeysGenerator {
  final Map<String, dynamic> _localesMap;
  final String _fileName;
  final String Function(String value)? _fileTransformer;
  final bool _checkInterpolation;

  const LocaleKeysGenerator({
    required Map<String, dynamic> localesMap,
    required String fileName,
    String Function(String value)? fileTransformer,
    bool checkInterpolation = true,
  })  : _localesMap = localesMap,
        _fileName = fileName,
        _fileTransformer = fileTransformer,
        _checkInterpolation = checkInterpolation;

  factory LocaleKeysGenerator.fromAssetsFile({
    required File file,
    required String fileName,
    String Function(String value)? fileTransformer,
    bool checkInterpolation = true,
  }) {
    final localesMap = jsonDecode(file.readAsStringSync());
    return LocaleKeysGenerator(
      localesMap: localesMap,
      fileName: fileName,
      fileTransformer: fileTransformer,
      checkInterpolation: checkInterpolation,
    );
  }

  String generateFile() {
    final fileFormat = _fileTransformer ?? _defaultFileTemplate;
    final fileContent = fileFormat(_fileName);
    final keys = _nestedGenerateKeys(_localesMap);
    final fields = <String>[];
    for (final key in keys) {
      fields.add(key.dartField);
    }
    return sprintf(fileContent, [
      DateTime.now().toUtc(),
      fields.join('\n'),
    ]);
  }

  /// Generates keys from nested map join with .
  List<_LocaleFieldKey> _nestedGenerateKeys(Map<String, dynamic> source) {
    final result = <_LocaleFieldKey>[];
    for (final entry in source.entries) {
      final key = _LocaleFieldKey(
        key: entry.key,
        targetValue: entry.value.toString(),
        checkInterpolation: _checkInterpolation,
      );
      final value = entry.value;
      if (value is Map<String, dynamic>) {
        final nestedGenerateKeys = _nestedGenerateKeys(value);
        result.addAll(nestedGenerateKeys.map((e) => key + e));
      } else {
        result.add(key);
      }
    }
    return result;
  }

  String _defaultFileTemplate(String className) => '''
    /// Generated by LocaleKeysGenerator on %s
    mixin ${className.pascalCase} {
    %s  
    }
''';
}

class _LocaleFieldKey {
  final String key;
  final String targetValue;
  final bool checkInterpolation;

  const _LocaleFieldKey({
    required this.key,
    required this.targetValue,
    required this.checkInterpolation,
  });

  String get dartField {
    final result =
        "static const ${key.replaceAll('.', '_').camelCase} = '$key';";
    if (!checkInterpolation) {
      return result;
    }
    final interpolationList = <String>[];
    final interpolation = RegExp('(%[i|d|x|X|o|O|e|E|f|F|g|G|s])');
    final matches = interpolation.allMatches(targetValue);
    for (final match in matches) {
      final interpolationValue = match.group(0);
      if (interpolationValue != null) {
        interpolationList.add(interpolationValue);
      }
    }
    if (interpolationList.isEmpty) {
      return result;
    }
    final interpolationString = interpolationList.join(', ');
    return '''
      /// translation have interpolations: $interpolationString
      $result
    ''';
  }

  @override
  String toString() => dartField;

  _LocaleFieldKey operator +(_LocaleFieldKey b) => _LocaleFieldKey(
    key: '$key.${b.key}',
    targetValue: b.targetValue,
    checkInterpolation: checkInterpolation || b.checkInterpolation,
  );
}

class LocaleKeysGeneratorAutoSave extends LocaleKeysGenerator {
  final File _fileToSave;

  LocaleKeysGeneratorAutoSave({
    required super.localesMap,
    super.fileTransformer,
    required File fileToSave,
    super.checkInterpolation = true,
  })  : _fileToSave = fileToSave,
        super(
        fileName: fileToSave.nameWithoutExtension,
      );

  factory LocaleKeysGeneratorAutoSave.fromAssetsFile({
    required File toSave,
    required File file,
    String Function(String value)? fileTransformer,
    bool checkInterpolation = true,
  }) {
    final localesMap = jsonDecode(file.readAsStringSync());
    return LocaleKeysGeneratorAutoSave(
      localesMap: localesMap,
      fileToSave: toSave,
      fileTransformer: fileTransformer,
      checkInterpolation: checkInterpolation,
    );
  }

  @override
  String generateFile() {
    final fileContent = super.generateFile();
    _fileToSave.parent.createSync(recursive: true);
    _fileToSave.writeAsStringSync(fileContent);
    return fileContent;
  }
}